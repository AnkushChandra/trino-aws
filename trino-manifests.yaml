---
# Source: trino/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trino
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
---
# Source: trino/templates/configmap-catalog.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-catalog
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: catalogs
data:
  tpcds.properties: |
    connector.name=tpcds
    tpcds.splits-per-node=4
    
  tpch.properties: |
    connector.name=tpch
    tpch.splits-per-node=4
---
# Source: trino/templates/configmap-coordinator.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-coordinator
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
data:
  node.properties: |
    node.environment=production
    node.data-dir=/data/trino
    plugin.dir=/usr/lib/trino/plugin

  jvm.config: |
    -server
    -agentpath:/usr/lib/trino/bin/libjvmkill.so
    -Xmx8G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -XX:-OmitStackTraceInFastThrow
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.attach.allowAttachSelf=true
    -Djdk.nio.maxCachedBufferSize=2000000
    # Allow loading dynamic agent used by JOL
    -XX:+EnableDynamicAgentLoading
  

  config.properties: |
    coordinator=true
    node-scheduler.include-coordinator=false
    http-server.http.port=8080
    query.max-memory=4GB
    query.max-memory-per-node=1GB
    discovery.uri=http://localhost:8080
  exchange-manager.properties: |
    exchange-manager.name=filesystem
    exchange.base-directories=/tmp/trino-local-file-system-exchange-manager

  log.properties: |
    io.trino=INFO
---
# Source: trino/templates/configmap-coordinator.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-schemas-volume-coordinator
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
data:
---
# Source: trino/templates/configmap-worker.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-worker
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
data:
  node.properties: |
    node.environment=production
    node.data-dir=/data/trino
    plugin.dir=/usr/lib/trino/plugin

  jvm.config: |
    -server
    -agentpath:/usr/lib/trino/bin/libjvmkill.so
    -Xmx8G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -XX:-OmitStackTraceInFastThrow
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.attach.allowAttachSelf=true
    -Djdk.nio.maxCachedBufferSize=2000000
    # Allow loading dynamic agent used by JOL
    -XX:+EnableDynamicAgentLoading
  

  config.properties: |
    coordinator=false
    http-server.http.port=8080
    query.max-memory=4GB
    query.max-memory-per-node=1GB
    discovery.uri=http://trino:8080
  exchange-manager.properties: |
    exchange-manager.name=filesystem
    exchange.base-directories=/tmp/trino-local-file-system-exchange-manager

  log.properties: |
    io.trino=INFO
---
# Source: trino/templates/configmap-worker.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-schemas-volume-worker
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
data:
---
# Source: trino/templates/service-coordinator.yaml
apiVersion: v1
kind: Service
metadata:
  name: trino
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
  annotations:
    {}
spec:
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/component: coordinator
---
# Source: trino/templates/service-worker.yaml
apiVersion: v1
kind: Service
metadata:
  name: trino-worker
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
  annotations:
    {}
spec:
  clusterIP: None
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/component: worker
---
# Source: trino/templates/deployment-coordinator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trino-coordinator
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: coordinator
    trino.io/network-policy-protection: disabled
  annotations:
    {}
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: trino
      app.kubernetes.io/instance: trino
      app.kubernetes.io/component: coordinator
  template:
    metadata:
      annotations:
        checksum/catalog-config: 060dd6d2e484a2d1f5a2b6ae544a8721815017e34509eff2f53af8d31584d62c
        checksum/coordinator-config: d04cd41e9b77f3fec01e57de429eac8b34c1eaf3f966393a99dd32a6900115ab

      labels:
        helm.sh/chart: trino-1.39.1
        app.kubernetes.io/name: trino
        app.kubernetes.io/instance: trino
        app.kubernetes.io/version: "475"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: coordinator
        trino.io/network-policy-protection: disabled
    spec:
      serviceAccountName: trino
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
      volumes:
        - name: config-volume
          configMap:
            name: trino-coordinator
        - name: catalog-volume
          configMap:
            name: trino-catalog
        - name: schemas-volume
          configMap:
            name: trino-schemas-volume-coordinator
      terminationGracePeriodSeconds: 30
      containers:
        - name: trino-coordinator
          image: trinodb/trino:435
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          env:
            []
          envFrom:
            []
          volumeMounts:
            - mountPath: /etc/trino
              name: config-volume
            - mountPath: /etc/trino/catalog
              name: catalog-volume
            - mountPath: /etc/trino/schemas
              name: schemas-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command: [/usr/lib/trino/bin/health-check]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          lifecycle:
            {}
          resources:
            limits:
              cpu: "2"
              memory: 8Gi
            requests:
              cpu: "1"
              memory: 2Gi
---
# Source: trino/templates/deployment-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trino-worker
  namespace: trino
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
    trino.io/network-policy-protection: disabled
  annotations:
    {}
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  replicas: 4
  selector:
    matchLabels:
      app.kubernetes.io/name: trino
      app.kubernetes.io/instance: trino
      app.kubernetes.io/component: worker
  template:
    metadata:
      annotations:
        checksum/catalog-config: 060dd6d2e484a2d1f5a2b6ae544a8721815017e34509eff2f53af8d31584d62c
        checksum/worker-config: cd0fe91530090ec9d13d8823887b7b32c88c9501a877a1a298a411c4774e90a5
      labels:
        helm.sh/chart: trino-1.39.1
        app.kubernetes.io/name: trino
        app.kubernetes.io/instance: trino
        app.kubernetes.io/version: "475"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: worker
        trino.io/network-policy-protection: disabled
    spec:
      serviceAccountName: trino
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
      volumes:
        - name: config-volume
          configMap:
            name: trino-worker
        - name: catalog-volume
          configMap:
            name: trino-catalog
        - name: schemas-volume
          configMap:
            name: trino-schemas-volume-worker
      terminationGracePeriodSeconds: 30
      containers:
        - name: trino-worker
          image: trinodb/trino:435
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          env:
            []
          envFrom:
            []
          volumeMounts:
            - mountPath: /etc/trino
              name: config-volume
            - mountPath: /etc/trino/catalog
              name: catalog-volume
            - mountPath: /etc/trino/schemas
              name: schemas-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            exec:
              command: [/usr/lib/trino/bin/health-check]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          lifecycle:
          resources:
            limits:
              cpu: "2"
              memory: 8Gi
            requests:
              cpu: "1"
              memory: 2Gi
---
# Source: trino/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: trino-test-connection
  labels:
    helm.sh/chart: trino-1.39.1
    app.kubernetes.io/name: trino
    app.kubernetes.io/instance: trino
    app.kubernetes.io/version: "475"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test
    test: connection
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: cli
      image: trinodb/trino:435
      command: ['trino']
      args:
      - trino://trino:8080
      - --user=admin
      - --debug
      - --execute=SELECT COUNT(*) FROM tpch.tiny.nation
      - --no-progress
  restartPolicy: Never
